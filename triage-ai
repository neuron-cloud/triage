"""
Medical Triage Tool using Google Gemini API
Author: AI Assistant for Physician-Scientist
Purpose: Real-time triage engine for clinical text analysis
"""

import json
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
import requests

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


@dataclass
class TriageResult:
    """Data class for structured triage results"""
    triage_level: str
    confidence: float
    red_flags: List[str]
    suggested_actions: List[str]
    reasoning: str
    timestamp: str


class MedicalTriageEngine:
    """
    AI-powered medical triage engine using Gemini 2.0 Flash
    
    This class provides methods to analyze clinical text and return
    structured triage recommendations.
    """
    
    def __init__(self, api_key: str, project_id: str = "gen-lang-client-0847581252"):
        """
        Initialize the triage engine
        
        Args:
            api_key: Google Gemini API key
            project_id: Your Google Cloud project ID
        """
        self.api_key = api_key
        self.project_id = project_id
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
        self.model = "gemini-2.0-flash-exp"  # Using Gemini 2.0 Flash for speed
        
        # Define triage levels
        self.triage_levels = {
            "EMERGENT": "Immediate attention required - life-threatening condition",
            "URGENT": "Prompt evaluation needed - potential for deterioration",
            "SEMI_URGENT": "Timely assessment required - stable but concerning",
            "ROUTINE": "Standard evaluation - no immediate risk identified"
        }
        
        logger.info(f"Initialized Medical Triage Engine with Gemini 2.0 Flash")
    
    def _create_triage_prompt(self, clinical_text: str) -> str:
        """
        Create a structured prompt for the LLM
        
        Args:
            clinical_text: Free-text clinical input
            
        Returns:
            Formatted prompt string
        """
        prompt = f"""You are an expert medical triage system. Analyze the following clinical text and provide a structured triage assessment.

CLINICAL TEXT:
{clinical_text}

INSTRUCTIONS:
1. Assign a triage level: EMERGENT, URGENT, SEMI_URGENT, or ROUTINE
2. List specific red flags or concerning findings
3. Suggest immediate next steps for clinical care
4. Provide brief clinical reasoning

FORMAT YOUR RESPONSE AS JSON:
{{
    "triage_level": "EMERGENT|URGENT|SEMI_URGENT|ROUTINE",
    "confidence": 0.0-1.0,
    "red_flags": ["flag1", "flag2", ...],
    "suggested_actions": ["action1", "action2", ...],
    "reasoning": "Brief explanation of triage decision"
}}

Focus on patient safety and err on the side of caution when uncertain."""
        
        return prompt
    
    def analyze_clinical_text(self, clinical_text: str) -> TriageResult:
        """
        Analyze clinical text using Gemini 2.0 Flash
        
        Args:
            clinical_text: Free-text clinical input
            
        Returns:
            TriageResult object with structured output
        """
        try:
            # Prepare the API endpoint
            url = f"{self.base_url}/{self.model}:generateContent?key={self.api_key}"
            
            # Create the request payload
            prompt = self._create_triage_prompt(clinical_text)
            
            payload = {
                "contents": [{
                    "parts": [{
                        "text": prompt
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.1,  # Low temperature for medical consistency
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 1024,
                    "responseMimeType": "application/json"  # Request JSON output
                }
            }
            
            # Make the API request
            logger.info(f"Sending request to Gemini 2.0 Flash...")
            response = requests.post(url, json=payload)
            response.raise_for_status()
            
            # Parse the response
            result = response.json()
            
            # Extract the generated content
            generated_text = result['candidates'][0]['content']['parts'][0]['text']
            
            # Parse JSON response
            result_dict = json.loads(generated_text)
            
            # Create TriageResult object
            triage_result = TriageResult(
                triage_level=result_dict.get("triage_level", "ROUTINE"),
                confidence=float(result_dict.get("confidence", 0.5)),
                red_flags=result_dict.get("red_flags", []),
                suggested_actions=result_dict.get("suggested_actions", []),
                reasoning=result_dict.get("reasoning", ""),
                timestamp=datetime.now().isoformat()
            )
            
            logger.info(f"Triage analysis complete: {triage_result.triage_level}")
            return triage_result
            
        except requests.exceptions.RequestException as e:
            logger.error(f"API request failed: {str(e)}")
            return self._create_error_result(f"API request failed: {str(e)}")
            
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse JSON response: {str(e)}")
            return self._create_error_result(f"JSON parsing failed: {str(e)}")
            
        except Exception as e:
            logger.error(f"Unexpected error during analysis: {str(e)}")
            return self._create_error_result(f"Analysis failed: {str(e)}")
    
    def _create_error_result(self, error_message: str) -> TriageResult:
        """Create a safe error result that defaults to urgent triage"""
        return TriageResult(
            triage_level="URGENT",  # Default to urgent for safety
            confidence=0.0,
            red_flags=["ERROR: Unable to complete automated analysis"],
            suggested_actions=["Perform manual clinical assessment", "Check system logs"],
            reasoning=error_message,
            timestamp=datetime.now().isoformat()
        )
    
    def batch_analyze(self, clinical_texts: List[str]) -> List[TriageResult]:
        """
        Analyze multiple clinical texts in batch
        
        Args:
            clinical_texts: List of clinical text inputs
            
        Returns:
            List of TriageResult objects
        """
        results = []
        for i, text in enumerate(clinical_texts):
            logger.info(f"Processing case {i+1} of {len(clinical_texts)}")
            result = self.analyze_clinical_text(text)
            results.append(result)
        return results
    
    def format_result_display(self, result: TriageResult) -> str:
        """
        Format triage result for display
        
        Args:
            result: TriageResult object
            
        Returns:
            Formatted string for display
        """
        # Define color codes for urgency levels
        colors = {
            "EMERGENT": "\033[91m",  # Red
            "URGENT": "\033[93m",    # Yellow
            "SEMI_URGENT": "\033[94m",  # Blue
            "ROUTINE": "\033[92m",   # Green
        }
        reset = "\033[0m"
        
        color = colors.get(result.triage_level, "")
        
        display = f"""
{color}{'='*60}
MEDICAL TRIAGE ASSESSMENT
{'='*60}{reset}

⚡ TRIAGE LEVEL: {color}{result.triage_level}{reset}
   {self.triage_levels.get(result.triage_level, "")}
   
📊 CONFIDENCE: {result.confidence:.1%}

🚨 RED FLAGS IDENTIFIED:
{chr(10).join(f'   • {flag}' for flag in result.red_flags) if result.red_flags else '   • None identified'}

📋 SUGGESTED ACTIONS:
{chr(10).join(f'   ✓ {action}' for action in result.suggested_actions)}

💭 CLINICAL REASONING:
   {result.reasoning}

⏰ Analysis Timestamp: {result.timestamp}
{'='*60}
"""
        return display
    
    def to_json(self, result: TriageResult) -> str:
        """Convert TriageResult to JSON string"""
        return json.dumps({
            "triage_level": result.triage_level,
            "confidence": result.confidence,
            "red_flags": result.red_flags,
            "suggested_actions": result.suggested_actions,
            "reasoning": result.reasoning,
            "timestamp": result.timestamp
        }, indent=2)


# Utility functions for easy testing

def quick_triage(clinical_text: str, api_key: str) -> TriageResult:
    """
    Quick function to perform triage analysis
    
    Args:
        clinical_text: Clinical text to analyze
        api_key: Google Gemini API key
        
    Returns:
        TriageResult object
    """
    engine = MedicalTriageEngine(api_key)
    return engine.analyze_clinical_text(clinical_text)


# Example usage and test cases

if __name__ == "__main__":
    # Your API credentials
    API_KEY = "Your Google Gemini API Key"
    PROJECT_ID = "gen-lang-client-0847581252"
    
    # Example clinical scenarios for testing
    test_cases = [
        {
            "name": "Emergent - Stroke",
            "text": """
            68yo male presenting with sudden onset right-sided weakness and slurred speech 
            starting 45 minutes ago. Unable to lift right arm, facial droop noted. 
            BP 185/95, irregular pulse. History of AFib, not on anticoagulation.
            """
        },
        {
            "name": "Urgent - Chest Pain",
            "text": """
            52yo female with 2 hours of substernal chest pressure, radiating to left arm. 
            Associated with diaphoresis and mild SOB. Pain 7/10, not relieved by rest. 
            PMH: HTN, hyperlipidemia, family history of CAD. VS stable.
            """
        },
        {
            "name": "Semi-Urgent - Abdominal Pain",
            "text": """
            35yo female with 12 hours of RLQ abdominal pain, now 6/10. Low grade fever 100.4F.
            Mild nausea, no vomiting. Positive rebound tenderness. WBC pending.
            """
        },
        {
            "name": "Routine - URI",
            "text": """
            28yo healthy male with 3 days of nasal congestion, mild sore throat, 
            and occasional dry cough. No fever, no SOB. Eating and drinking well. 
            No significant PMH. Vital signs normal.
            """
        }
    ]
    
    print("Medical Triage Engine - Gemini 2.0 Flash")
    print("=" * 60)
    
    # Initialize engine
    engine = MedicalTriageEngine(API_KEY, PROJECT_ID)
    
    # Test each scenario
    for test in test_cases:
        print(f"\nTesting: {test['name']}")
        print("-" * 40)
        
        try:
            # Analyze
            result = engine.analyze_clinical_text(test['text'])
            
            # Display results
            print(engine.format_result_display(result))
            
        except Exception as e:
            print(f"Error in test: {e}")
    
    # Example of JSON input/output handling
    print("\n" + "="*60)
    print("JSON Input/Output Example")
    print("="*60)
    
    # Sample JSON input
    json_input = {
        "patient_id": "12345",
        "clinical_text": "45yo male, severe headache x 2 hours, worst headache of life, neck stiffness, photophobia",
        "source": "ED triage",
        "timestamp": datetime.now().isoformat()
    }
    
    print(f"Input JSON: {json.dumps(json_input, indent=2)}")
    
    # Process
    result = quick_triage(json_input["clinical_text"], API_KEY)
    
    # Convert to JSON output
    json_output = {
        "patient_id": json_input["patient_id"],
        "triage_result": {
            "level": result.triage_level,
            "confidence": result.confidence,
            "red_flags": result.red_flags,
            "actions": result.suggested_actions,
            "reasoning": result.reasoning
        },
        "processed_at": result.timestamp
    }
    
    print(f"\nOutput JSON: {json.dumps(json_output, indent=2)}")
    
    # Demonstrate batch processing
    print("\n" + "="*60)
    print("Batch Processing Example")
    print("="*60)
    
    batch_texts = [
        "Patient with severe chest pain and shortness of breath",
        "Minor laceration on finger, bleeding controlled",
        "Altered mental status, confused, BP 80/50"
    ]
    
    batch_results = engine.batch_analyze(batch_texts)
    for i, result in enumerate(batch_results):
        print(f"\nCase {i+1}: {result.triage_level} (Confidence: {result.confidence:.1%})")


# Google Colab specific setup code
def setup_colab():
    """
    Setup function for Google Colab environment
    Run this first in your Colab notebook
    """
    print("Setting up Medical Triage Engine in Google Colab...")
    
    # Install required packages
    import subprocess
    subprocess.run(["pip", "install", "requests"], check=True)
    
    print("✅ Setup complete!")
    print(f"✅ Using Gemini 2.0 Flash model")
    print(f"✅ Project ID: gen-lang-client-0847581252")
    print("\nReady to analyze clinical text!")
    
    # Return configured engine
    return MedicalTriageEngine(
        api_key="AIzaSyAUeHEIsHp-EH3UaurOEDV9YNF-DJpkX1s",
        project_id="gen-lang-client-0847581252"
    )
